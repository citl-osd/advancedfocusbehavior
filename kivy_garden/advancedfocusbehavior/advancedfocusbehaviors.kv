#:kivy 1.11.1

#:set TRANSPARENT (0, 0, 0, 0)

<FocusWidget@FocusBehavior+Widget>:
    canvas.before:
        Color:
            rgba: self.highlight_color if self.draw_focus and self.focus else TRANSPARENT
        Rectangle:
            pos: self.x - 2, self.y - 2
            size: self.width + 4, self.height + 4

        Color:
            rgba: self.highlight_bg_color if self.draw_focus and self.focus else TRANSPARENT
        Rectangle:
            pos: self.x + 2, self.y + 2
            size: self.width - 4, self.height - 4


<FocusFileChooserListLayout@FileChooserListLayout>:
    on_entry_added: treeview.add_node(args[1])
    on_entries_cleared: treeview.root.nodes = []
    on_subentry_to_entry: not args[2].locked and treeview.add_node(args[1], args[2])
    on_remove_subentry: args[2].nodes = []
    FocusBoxLayout:
        pos: root.pos
        size: root.size
        size_hint: None, None
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            orientation: 'horizontal'
            Widget:
                # Just for spacing
                width: '10dp'
                size_hint_x: None
            Label:
                text: 'Name'
                text_size: self.size
                halign: 'left'
                bold: True
            Label:
                text: 'Size'
                text_size: self.size
                size_hint_x: None
                halign: 'right'
                bold: True
            Widget:
                # Just for spacing
                width: '10dp'
                size_hint_x: None
        FocusScrollView:
            id: scrollview
            do_scroll_x: False
            Scatter:
                do_rotation: False
                do_scale: False
                do_translation: False
                size: treeview.size
                size_hint_y: None
                FocusTreeView:
                    id: treeview
                    hide_root: True
                    size_hint_y: None
                    width: scrollview.width
                    height: self.minimum_height
                    on_node_expand: root.controller.entry_subselect(args[1])
                    on_node_collapse: root.controller.close_subselection(args[1])


<FocusFileChooserListView@FileChooserListView>:
    layout: layout
    FocusFileChooserListLayout:
        id: layout
        controller: root


[FocusFileListEntry@FloatLayout+FocusTreeViewNode]:
    locked: False
    entries: []
    path: ctx.path
    # FIXME: is_selected is actually a read_only treeview property. In this
    # case, however, we're doing this because treeview only has single-selection
    # hardcoded in it. The fix to this would be to update treeview to allow
    # multiple selection.
    is_selected: self.path in ctx.controller().selection

    orientation: 'horizontal'
    size_hint_y: None
    height: '48dp' if dp(1) > 1 else '24dp'
    # Don't allow expansion of the ../ node
    is_leaf: not ctx.isdir or ctx.name.endswith('..' + ctx.sep) or self.locked
    on_touch_down: self.collide_point(*args[1].pos) and ctx.controller().entry_touched(self, args[1])
    on_touch_up: self.collide_point(*args[1].pos) and ctx.controller().entry_released(self, args[1])
    BoxLayout:
        pos: root.pos
        size_hint_x: None
        width: root.width - dp(10)
        Label:
            id: filename
            text_size: self.width, None
            halign: 'left'
            shorten: True
            text: ctx.name
        Label:
            text_size: self.width, None
            size_hint_x: None
            halign: 'right'
            text: '{}'.format(ctx.get_nice_size())


<FocusColorPicker_Input@FocusTextInput>:
    multiline: False
    write_tab: False
    mroot: None
    padding: sp(5)
    border: 4, 9, 4, 9

<FocusColorPicker_Selector@FocusBoxLayout>
    foreground_color: None
    text: ''
    mroot: None
    mode: 'rgb'
    color: 0
    spacing: '2sp'
    ColorPicker_Label:
        text: root.text
        mroot: root.mroot
        color: root.foreground_color or (1, 1, 1, 1)
    FocusAnchorLayout:
        size_hint_x: None
        width: '50sp'
        FocusColorPicker_Input:
            mroot: root.mroot
            text: str(int(sldr.value))
            size_hint_y: None
            height: '28sp'
            on_text:
                root.mroot._trigger_update_clr(root.mode, root.clr_idx, args[1])
    FocusSlider:
        id: sldr
        size_hint: 1, .25
        pos_hint: {'center_y':.5}
        range: 0, 255
        value: root.color * 255
        on_value:
            root.mroot._trigger_update_clr(root.mode, root.clr_idx, args[1])

<FocusColorPicker@ColorPicker+FocusAwareWidget>:
    foreground_color: (1, 1, 1, 1) if self.hsv[2] * root.color[3] < .5 else (0, 0, 0, 1)
    wheel: wheel
    FocusBoxLayout:
        orientation: 'vertical' if root.width < root.height else 'horizontal'
        spacing: '5sp'
        FocusStackLayout:
            orientation: 'tb-lr'
            size_hint_y: None if root.width < root.height else 1
            height: sp(33) * 4 if root.width < root.height else self.height
            canvas:
                Color:
                    rgba: root.color
                Rectangle:
                    size: self.size
                    pos: self.pos

            FocusColorPicker_Selector:
                mroot: root
                text: 'R'
                clr_idx: 0
                color: root.color[0]
                foreground_color: root.foreground_color
                size_hint_y: None if root.width < root.height else 0.125
                size_hint_x: .5 if root.width < root.height else 1
                height: '33sp' if root.width < root.height else self.height

            FocusColorPicker_Selector:
                mroot: root
                text: 'G'
                clr_idx: 1
                color: root.color[1]
                foreground_color: root.foreground_color
                size_hint_y: None if root.width < root.height else 0.125
                size_hint_x: .5 if root.width < root.height else 1
                height: '33sp' if root.width < root.height else self.height

            FocusColorPicker_Selector:
                mroot: root
                text: 'B'
                clr_idx: 2
                color: root.color[2]
                foreground_color: root.foreground_color
                size_hint_y: None if root.width < root.height else 0.125
                size_hint_x: .5 if root.width < root.height else 1
                height: '33sp' if root.width < root.height else self.height

            FocusColorPicker_Selector:
                mroot: root
                text: 'A'
                clr_idx: 3
                color: root.color[3]
                foreground_color: root.foreground_color
                size_hint_y: None if root.width < root.height else 0.125
                size_hint_x: .5 if root.width < root.height else 1
                height: '33sp' if root.width < root.height else self.height

            FocusColorPicker_Selector:
                mroot: root
                mode: 'hsv'
                text: 'H'
                clr_idx: 0
                color: root.hsv[0]
                foreground_color: root.foreground_color
                size_hint_y: None if root.width < root.height else 0.125
                size_hint_x: .5 if root.width < root.height else 1
                height: '33sp' if root.width < root.height else self.height

            FocusColorPicker_Selector:
                mroot: root
                mode: 'hsv'
                text: 'S'
                clr_idx: 1
                color: root.hsv[1]
                foreground_color: root.foreground_color
                size_hint_y: None if root.width < root.height else 0.125
                size_hint_x: .5 if root.width < root.height else 1
                height: '33sp' if root.width < root.height else self.height

            FocusColorPicker_Selector:
                mroot: root
                mode: 'hsv'
                text: 'V'
                clr_idx: 2
                color: root.hsv[2]
                foreground_color: root.foreground_color
                size_hint_y: None if root.width < root.height else 0.125
                size_hint_x: .5 if root.width < root.height else 1
                height: '33sp' if root.width < root.height else self.height

            FocusBoxLayout:
                size_hint_y: None if root.width < root.height else 0.125
                size_hint_x: .5 if root.width < root.height else 1
                height: '33sp' if root.width < root.height else self.height

                spacing: '2sp'
                ColorPicker_Label:
                    mroot: root
                    text: 'X'
                    color: root.foreground_color
                FocusAnchorLayout:
                    FocusColorPicker_Input:
                        size_hint_y: None
                        height: '28sp'
                        mroot: root
                        text: str(root.hex_color)
                        on_text: root._trigger_update_hex(args[1])


        ColorWheel:
            id: wheel
            color: root.color
            on_color: root.set_color(args[1][:3])
